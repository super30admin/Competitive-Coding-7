class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int result=0;
        if(intervals==null || intervals.length==0){
            return 0;
        }
        Arrays.sort(intervals ,new Comparator<int []>() {
            public int compare(int [] a, int [] b) {
                return a[0] - b[0];
              }
        });
            
        PriorityQueue<Integer>  pq= new PriorityQueue<>();
        pq.add(intervals[0][1]);
        for(int i=1;i<intervals.length;i++){
            
          if(pq.peek()<= intervals[i][0]){
             pq.poll();
          } 
            
            pq.add(intervals[i][1]);
        }
         
       return pq.size(); 
    }
}
//Time complexity : O(n log n)
//Space Complexity: O(n)
// Approach: sort the given array by 0th index, add values to priority queue. if the start time of next is less than end time of prev pop from PQ. 
