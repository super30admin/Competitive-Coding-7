Time complexity: NlogN; space complexity: O(logN) worst case
public class Solution{
public int meetingrooms(int[][] intervals){

  Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
  
  PriorityQueue<Integer> pq = new PriorityQueue<>();
  
  for(int[] interval : intervals){
    int start = interval[0];
    int end = interval[1];
    
    if(pq.isEmpty() || start < pq.peek())
    // allot a new room
      pq.add(end);
     }
     else{
     // take the allocated room; no new new room required
     pq.poll();
     pq.add(end);
     }
}
return pq.size();
}
}
