//TimeComplexity  nlog(n)
//SpaceComplexity O(n)

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        
    
        Arrays.sort(intervals, (a,b)  -> (a[0]-b[0]));
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        minHeap.add(intervals[0][1]);
        int count = 1;
        
        for(int i = 1; i < intervals.length; i++){
            
            //Compare start time with the min end time in the heap;
            if(intervals[i][0] < minHeap.peek()){
                count++;
            }else{
                 minHeap.poll();
            } 
                   
            minHeap.add(intervals[i][1]);
        }
       return count; 
    }
}
