//Tc: O(nlogn)
//Sc: O(n)

//Approach: Idea is to use end times in priority queue if start && end time are non mergeable OR end of previous is more than start of current
//Array need to be sorted for this logic.

class Solution {
    int count = 1;
    public int minMeetingRooms(int[][] intervals) {
        if(intervals==null || intervals.length==0) {
			return 0;
		}

    Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
    PriorityQueue<Integer> pq = new PriorityQueue<>();

    for(int i = 0; i < intervals.length ; i++){
            //first element from sorted intervals[]
        int[] currInterval = intervals[i];
            // System.out.println(polled[0] + " " + polled[1]);
            //if start time of next element is before end time of current element
            //Add new end time  into the queue and poll previous end time;
        if(!pq.isEmpty() && currInterval[0]>=pq.peek()){
            pq.poll();
        }
            //adding end time if it cannot be merged with previous interval
        pq.add(currInterval[1]);

    }
           //return size of queue which contains end time of non - merged intervals
		return pq.size();
	
    }
}
